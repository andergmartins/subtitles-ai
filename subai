#!/bin/bash

# OpenAI ChatGPT CLI Assistant
# Usage: ./openai_chat.sh input.txt [optional model]

# Color codes for formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to display usage instructions
usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "$0 <input_file> [model_name] [output_file]"
    echo
    echo "Required:"
    echo "  <input_file>    Text file containing your query"
    echo "Optional:"
    echo "  [output_file]   Output file (default: subtitle.txt)"
    echo "  [model_name]    OpenAI model (default: gpt-4o-mini)"
    echo
    echo -e "${GREEN}Environment Variables:${NC}"
    echo "  OPENAI_API_KEY  Your OpenAI API key"
    exit 1
}

# Function to read .env file
read_env_file() {
    if [[ -f .env ]]; then
        export $(cat .env | grep -v '^#' | xargs)
    fi
}

# Check if API key is set
check_api_key() {
    read_env_file
    if [[ -z "$OPENAI_API_KEY" ]]; then
        echo -e "${RED}Error: OPENAI_API_KEY not found in environment or .env file.${NC}"
        echo "Please either:"
        echo "1. Set your OpenAI API key in the environment:"
        echo "   export OPENAI_API_KEY='your_api_key_here'"
        echo "2. Or create a .env file with the following content:"
        echo "   OPENAI_API_KEY=your_api_key_here"
        exit 1
    fi
}

# Validate input file
validate_input() {
    if [[ ! -f "$1" ]]; then
        echo -e "${RED}Error: Input file '$1' not found.${NC}"
        exit 1
    fi

    if [[ ! -s "$1" ]]; then
        echo -e "${RED}Error: Input file is empty.${NC}"
        exit 1
    fi
}

# Main function to interact with OpenAI API
chat_with_openai() {
    local input_file="$1"
    local output_file="${2:-subtitles.txt}"
    local model="${3:-gpt-4o-mini}"
    local query=$(cat "$input_file")

    # Prepare JSON payload
    local prompt_content=$(cat prompt.txt)
    local payload=$(jq -n \
        --arg model "$model" \
        --arg content "$query" \
        --arg prompt "$prompt_content" \
        '{
            model: $model,
            messages: [
                {
                    role: "system",
                    content: $prompt
                },
                {
                    role: "user",
                    content: $content
                }
            ],
            temperature: 1,
            max_completion_tokens: 2048,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0
        }')

    # Show progress message
    echo -e "${YELLOW}Hey bro... waiting for AI response...${NC}"

    # Make API call
    local response=$(curl https://api.openai.com/v1/chat/completions \
        -s \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$payload")

    # Check for errors
    local error=$(echo "$response" | jq -r '.error.message // empty')
    if [[ -n "$error" ]]; then
        echo -e "${RED}API Error: $error${NC}"
        exit 1
    fi

    # Extract response
    local ai_response=$(echo "$response" | jq -r '.choices[0].message.content')

    # Save response to file
    echo "$ai_response" > "$output_file"

    remove_trailing_spaces "$output_file"

    echo -e "${GREEN}AI Response saved to: $output_file${NC}"
}

remove_trailing_spaces() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS requires an extension with -i
        sed -i '' 's/ *$//' "$1"
    else
        # Linux version
        sed -i 's/ *$//' "$1"
    fi
}

# Main script logic
main() {
    # Check for help flag
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        usage
    fi

    # Validate arguments
    if [[ $# -lt 1 ]]; then
        usage
    fi

    # Check and set variables
    check_api_key
    validate_input "$1"

    # Perform chat with optional model and output file specification
    chat_with_openai "$1" "$2" "$3"
}

# Execute main function with all script arguments
main "$@"
